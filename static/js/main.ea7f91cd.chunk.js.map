{"version":3,"sources":["components/DeleteConfirmModal/DeleteConfirmModal.js","App.js","reportWebVitals.js","index.js"],"names":["DeleteConfirmModal","props","className","friendName","onClick","cancelDeleteFriend","deleteFriend","App","useState","friendsList","setFriendsList","setFriendName","displayFriendsList","setDisplayFriendsList","activePage","setActivePage","displayDeleteModal","setDisplayDeleteModal","toDeleteFriend","setToDeleteFriend","handleFavorite","name","newFriendsList","map","friend","favorite","useEffect","sort","a","b","type","value","placeholder","onChange","e","newDisplayFriendsList","filter","toLowerCase","includes","handleNameChange","target","onKeyPress","key","trimEnd","length","friendObject","oldFriendList","indexOfLastEvent","indexOfFirstEvent","DisplayFriendsList","slice","displayListOfFriends","itemsCountPerPage","totalItemsCount","hideDisabled","hideNavigation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea7f91cd.chunk.js","sourcesContent":["import './DeleteConfirmModal.css';\n\nexport default function DeleteConfirmModal(props) {\n\n  return (\n    <div className=\"delete-confirm-modal\">\n      <div className=\"title\">Delete Confirmation</div>\n      <div className=\"message\">Are you sure you want to delete \"{props.friendName}\" as your friend?</div>\n      <div className=\"form-actions\">\n        <button\n          className=\"cancel-button\"\n          onClick={() => props.cancelDeleteFriend()}\n        >\n          No\n        </button>\n        <button\n          className=\"submit-button\"\n          onClick={() => props.deleteFriend(props.friendName)}\n        >\n          Yes\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Pagination from \"react-js-pagination\";\nimport DeleteConfirmModal from \"./components/DeleteConfirmModal/DeleteConfirmModal\";\n\nfunction App() {\n  const [friendsList, setFriendsList] = useState([]);\n  const [friendName, setFriendName] = useState(\"\");\n  const [displayFriendsList, setDisplayFriendsList] = useState([]);\n  const [activePage, setActivePage] = useState(1);\n  const [displayDeleteModal, setDisplayDeleteModal] = useState(false);\n  const [toDeleteFriend, setToDeleteFriend] = useState(\"\");\n  const eventsPerPage = 4;\n\n  const handleDisplayDeleteModal = (name) => {\n    setDisplayDeleteModal(true);\n    setToDeleteFriend(name);\n  };\n\n  const displayListOfFriends = () => {\n    const indexOfLastEvent = activePage * eventsPerPage;\n    const indexOfFirstEvent = indexOfLastEvent - eventsPerPage;\n    const DisplayFriendsList =\n      displayFriendsList &&\n      displayFriendsList.slice(indexOfFirstEvent, indexOfLastEvent);\n    if (DisplayFriendsList.length > 0) {\n      return (\n        DisplayFriendsList &&\n        DisplayFriendsList.map((friend) => {\n          return (\n            <div className=\"friend-row\">\n              <div>\n                {friend.name}\n                <div className=\"text\">is your friend</div>\n              </div>\n              <div className=\"actions\">\n                <div\n                  className=\"star-icon\"\n                  onClick={() => handleFavorite(friend.name)}\n                >\n                  {friend.favorite ? (\n                    <span className=\"fa fa-star\"></span>\n                  ) : (\n                    <span className=\"fa fa-star-o\"></span>\n                  )}\n                </div>\n                <div\n                  className=\"delete-icon\"\n                  onClick={() => handleDisplayDeleteModal(friend.name)}\n                >\n                  <span className=\"fa fa-trash\"></span>\n                </div>\n              </div>\n            </div>\n          );\n        })\n      );\n    }else if(friendName !== ''){\n      return(\n      <div className=\"friend-row\">\n        Yay!! New friend. Hit enter to add as friend\n      </div>\n      );\n    }\n  };\n\n  const handleFavorite = (name) => {\n    let newFriendsList = [...friendsList];\n    newFriendsList = friendsList.map((friend) => {\n      if (friend.name === name) {\n        friend.favorite = !friend.favorite;\n      }\n      return friend;\n    });\n    setFriendsList(newFriendsList);\n  };\n\n  // const handleDelete = (name) => {\n  //   const newFriendsList = friendsList.filter((friend) => friend.name !== name);\n  //   const newDisplayFriendsList = displayFriendsList.filter(\n  //     (friend) => friend.name !== name\n  //   );\n  //   setFriendsList(newFriendsList);\n  //   setDisplayFriendsList(newDisplayFriendsList);\n  // };\n\n  const handleNameChange = (name) => {\n    let newDisplayFriendsList = [...friendsList];\n    newDisplayFriendsList = newDisplayFriendsList.filter((friend) =>\n      friend.name.toLowerCase().includes(name.toLowerCase())\n    );\n    setDisplayFriendsList(newDisplayFriendsList);\n    setFriendName(name);\n  };\n\n  useEffect(() => {\n    if (friendName === \"\") setDisplayFriendsList([...friendsList]);\n  }, [friendName]);\n\n  const handleInputFriendName = (e) => {\n    if (e.key === \"Enter\" && friendName !== \"\") {\n      const friendExists = friendsList.filter((friend) => {\n        return friend.name === friendName.trimEnd();\n      });\n      if (friendExists.length === 0) {\n        const friendObject = {\n          name: friendName,\n          favorite: false,\n        };\n        setFriendsList((oldFriendList) => [...oldFriendList, friendObject]);\n      }\n      setFriendName(\"\");\n    }\n  };\n\n  const sortByFavorite = () => {\n    setDisplayFriendsList(\n      [...displayFriendsList].sort((a, b) =>\n        a.favorite === b.favorite ? 0 : a.favorite ? -1 : 1\n      )\n    );\n    setActivePage(1);\n  };\n\n  const cancelDeleteFriend = () => {\n    setDisplayDeleteModal(false);\n  };\n\n  const deleteFriend = (name) => {\n    const newFriendsList = friendsList.filter((friend) => friend.name !== name);\n    const newDisplayFriendsList = displayFriendsList.filter(\n      (friend) => friend.name !== name\n    );\n    setFriendsList(newFriendsList);\n    setDisplayFriendsList(newDisplayFriendsList);\n    setDisplayDeleteModal(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"page-title\">Welcome to Haptik!!</h2>\n      <div className=\"body-wrapper\">\n        <div className=\"friends-list-table\">\n          <div className=\"header-row\">\n            <div className=\"header\">Friends List</div>\n            <div onClick={() => sortByFavorite()} className=\"sort-header\">\n              Sort By\n              <span className=\"sort-star-icon\">\n                <span className=\"fa fa-star\"></span>\n              </span>\n            </div>\n          </div>\n          <div className=\"add-new-friend\">\n            <input\n              type=\"text\"\n              value={friendName}\n              placeholder=\"Enter your friends name\"\n              onChange={(e) => handleNameChange(e.target.value)}\n              onKeyPress={handleInputFriendName}\n            />\n          </div>\n          <div className=\"list-of-friends\">{displayListOfFriends()}</div>\n          <Pagination\n            className=\"pagination-component\"\n            activePage={activePage}\n            itemsCountPerPage={4}\n            totalItemsCount={displayFriendsList.length}\n            onChange={setActivePage}\n            hideDisabled={true}\n            hideNavigation={true}\n          />\n        </div>\n      </div>\n      {displayDeleteModal && (\n        <div className=\"delete-modal\">\n          <DeleteConfirmModal\n            friendName={toDeleteFriend}\n            cancelDeleteFriend={cancelDeleteFriend}\n            deleteFriend={deleteFriend}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}